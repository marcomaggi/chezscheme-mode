;;; chezscheme-lists-of-symbols.el --- definition of lists of symbols for the Scheme language -*- coding: utf-8-unix -*-

;; Copyright (C) 2013, 2014, 2015, 2016, 2017 Marco Maggi

;; Author: Marco Maggi <marco.maggi-ipsu@poste.it>
;; Created: Tue Dec 10, 2013
;; Time-stamp: <2017-08-12 07:12:53 marco>
;; Keywords: convenience, data, languages

;; This file is part of MMUX Home Directory.
;;
;; This program is free software:  you can redistribute it and/or modify
;; it under the terms of the  GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This program is  distributed in the hope that it  will be useful, but
;; WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
;; MERCHANTABILITY or  FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
;; General Public License for more details.
;;
;; You should  have received a  copy of  the GNU General  Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;

;;; Commentary:

;; This file  is to be  loaded, for example,  by the code  defining font
;; locking rules for the Scheme programming language.

;;; Change Log:

;;

;;; Code:

;;The following regexps are used to build `chezscheme-identifier-rex' and
;;their  hierarchy  comes  directly  from  the  R6RS  document,  Section
;;"Lexical syntax", Subsection "Formal account".

(defconst chezscheme-identifier-constituent-rex
  "[a-zA-Z]")

(defconst chezscheme-identifier-special-initial-rex
  ;;;"[\\!\\$%\\&\\*/:<=>\\?^_~]")
  "[!$%&*/:<=>?^_~]")

(defconst chezscheme-identifier-inline-hex-escape-rex
  "\\x[0-9a-fA-F]+;")

(defconst chezscheme-identifier-initial-rex
  (concat "\\(?:" chezscheme-identifier-constituent-rex
	  "\\|" chezscheme-identifier-special-initial-rex
	  "\\|" chezscheme-identifier-inline-hex-escape-rex
	  "\\)"))

(defconst chezscheme-identifier-special-subsequent-rex
  ;;One among: - + . @ ?
  (concat "\\(?:" "\\-\\|\\+\\|\\.\\|@\\|?" "\\)"))

(defconst chezscheme-identifier-subsequent-rex
  (concat "\\(?:" chezscheme-identifier-initial-rex
	  "\\|" "[0-9]+"
	  "\\|" chezscheme-identifier-special-subsequent-rex
	  "\\)"))

(defconst chezscheme-identifier-peculiar-identifier-rex
  (concat "\\(?:" "\\+"
	  "\\|" "\\-"
	  "\\|" "\\.\\.\\."
	  "\\|" "\\->" "\\(?:" chezscheme-identifier-subsequent-rex "\\)*"
	  "\\)"))

(defconst chezscheme-identifier-internal-rex
  (concat "\\(?:"
	  "\\(?:" chezscheme-identifier-initial-rex
	  "\\(?:" chezscheme-identifier-subsequent-rex "\\)*" "\\)"
	  "\\|"
	  chezscheme-identifier-peculiar-identifier-rex
	  "\\)")
  "Internal regexp to match Scheme language ASCII identifiers.")


;;;; list of R6RS identifiers

(defconst chezscheme-constants-list
  '("#t" "#f")
  "List of constants for the R6RS Scheme language.")

(defconst chezscheme-aux-syntaxes-list
  '("=>" "_" "...")
  "List of auxiliary syntaxes from the Scheme R6RS libraries.")

(defconst chezscheme-r6rs-condition-list
  '("&assertion" "&condition" "&error" "&i/o" "&i/o-decoding"
    "&i/o-encoding" "&i/o-file-already-exists" "&i/o-file-does-not-exist"
    "&i/o-file-is-read-only" "&i/o-file-protection" "&i/o-filename"
    "&i/o-invalid-position" "&i/o-port" "&i/o-read" "&i/o-write"
    "&implementation-restriction" "&irritants" "&lexical" "&message"
    "&no-infinities" "&no-nans" "&non-continuable" "&serious" "&syntax"
    "&undefined" "&violation" "&warning" "&who")
  "List of condition symbols for the R6RS Scheme language.")

(defconst chezscheme-r6rs-keywords-list
  '("assert" "begin" "case" "case-lambda" "cond" "endianness"
    "delay"
    ;;Keywords starting with "define" should be handled separately.
    ;;
    ;; "define" "define-condition-type" "define-enumeration"
    ;; "define-record-type" "define-syntax"
    "do" "else"
    "export"
    "guard" "if" "or" "and"
    "import" "lambda" "let" "let*" "let*-values"
    "let-syntax" "let-values" "letrec" "letrec*" "letrec-syntax"
    "library" "program"
    "quasiquote" "quasisyntax" "quote"
    "set!" "syntax"
    "syntax-case" "syntax-rules" "unquote"
    "unquote-splicing" "unless" "unsyntax" "unsyntax-splicing"
    "when"
    "identifier-syntax" "fluid-let-syntax" "with-syntax"

    "eol-style" "error-handling-mode" "buffer-mode" "file-options"

    "concurrently" "monitor"

    ;;Auxiliary syntaxes for clauses.
    "protocol" "parent" "parent-rtd" "nongenerative"
    "fields" "immutable" "mutable" "sealed" "opaque")
  "List of keywords from the R6RS Scheme language libraries.

Notice that  'keywords' does not  mean 'syntaxes', in  the Scheme
language sense, it means that  the words should be highlighted as
language keywords.")

(defconst chezscheme-r6rs-functions-list
  '("+" "*" "-" "/" "<" ">" "<=" ">=" "=" "!="
    "abs"
    "acos"
    "angle"
    "append"
    "apply"
    "asin"
    "assertion-violation?"
    "assoc"
    "assp"
    "assq"
    "assv"
    "assertion-violation"
    "atan"
    "binary-port?"
    "bitwise-and"
    "bitwise-arithmetic-shift"
    "bitwise-arithmetic-shift-left"
    "bitwise-arithmetic-shift-right"
    "bitwise-bit-count"
    "bitwise-bit-field"
    "bitwise-bit-set?"
    "bitwise-copy-bit"
    "bitwise-copy-bit-field"
    "bitwise-first-bit-set"
    "bitwise-if"
    "bitwise-ior"
    "bitwise-length"
    "bitwise-not"
    "bitwise-reverse-bit-field"
    "bitwise-rotate-bit-field"
    "bitwise-xor"
    "boolean=?"
    "boolean?"
    "bound-identifier=?"
    "buffer-mode?"
    "bytevector->sint-list"
    "bytevector->string"
    "bytevector->u8-list"
    "bytevector->uint-list"
    "bytevector-copy"
    "bytevector-copy!"
    "bytevector-fill!"
    "bytevector-ieee-double-native-ref"
    "bytevector-ieee-double-native-set!"
    "bytevector-ieee-double-ref"
    "bytevector-ieee-double-set!"
    "bytevector-ieee-single-native-ref"
    "bytevector-ieee-single-native-set!"
    "bytevector-ieee-single-ref"
    "bytevector-ieee-single-set!"
    "bytevector-length"
    "bytevector-s16-native-ref"
    "bytevector-s16-native-set!"
    "bytevector-s16-ref"
    "bytevector-s16-set!"
    "bytevector-s32-native-ref"
    "bytevector-s32-native-set!"
    "bytevector-s32-ref"
    "bytevector-s32-set!"
    "bytevector-s64-native-ref"
    "bytevector-s64-native-set!"
    "bytevector-s64-ref"
    "bytevector-s64-set!"
    "bytevector-s8-ref"
    "bytevector-s8-set!"
    "bytevector-sint-ref"
    "bytevector-sint-set!"
    "bytevector-u16-native-ref"
    "bytevector-u16-native-set!"
    "bytevector-u16-ref"
    "bytevector-u16-set!"
    "bytevector-u32-native-ref"
    "bytevector-u32-native-set!"
    "bytevector-u32-ref"
    "bytevector-u32-set!"
    "bytevector-u64-native-ref"
    "bytevector-u64-native-set!"
    "bytevector-u64-ref"
    "bytevector-u64-set!"
    "bytevector-u8-ref"
    "bytevector-u8-set!"
    "bytevector-uint-ref"
    "bytevector-uint-set!"
    "bytevector=?"
    "bytevector?"
    "car"
    "caaaar"
    "caaadr"
    "caaar"
    "caadar"
    "caaddr"
    "caadr"
    "caar"
    "cadaar"
    "cadadr"
    "cadar"
    "caddar"
    "cadddr"
    "caddr"
    "cadr"
    "call-with-bytevector-output-port"
    "call-with-input-file"
    "call-with-output-file"
    "call-with-port"
    "call-with-string-output-port"
    "call-with-current-continuation"
    "call/cc"
    "call-with-values"
    "cdaaar"
    "cdaadr"
    "cdaar"
    "cdadar"
    "cdaddr"
    "cdadr"
    "cdar"
    "cddaar"
    "cddadr"
    "cddar"
    "cdddar"
    "cddddr"
    "cdddr"
    "cddr"
    "cdr"
    "ceiling"
    "char->integer"
    "char-alphabetic?"
    "char-ci<=?"
    "char-ci<?"
    "char-ci!=?"
    "char-ci=?"
    "char-ci>=?"
    "char-ci>?"
    "char-downcase"
    "char-foldcase"
    "char-general-category"
    "char-lower-case?"
    "char-numeric?"
    "char-title-case?"
    "char-titlecase"
    "char-upcase"
    "char-upper-case?"
    "char-whitespace?"
    "char<=?"
    "char<?"
    "char=?"
    "char!=?"
    "char>=?"
    "char>?"
    "char?"
    "close-input-port"
    "close-output-port"
    "close-port"
    "command-line"
    "complex?"
    "condition"
    "condition-accessor"
    "condition-irritants"
    "condition-message"
    "condition-predicate"
    "condition-who"
    "condition?"
    "coroutine"
    "current-coroutine-uid"
    "coroutine-uid?"
    "cos"
    "current-error-port"
    "current-input-port"
    "current-output-port"
    "datum->syntax"
    "delete-file"
    "denominator"
    "display"
    "div"
    "div-and-mod"
    "div0"
    "div0-and-mod0"
    "dump-coroutines"
    "dynamic-wind"
    "enum-set->list"
    "enum-set-complement"
    "enum-set-constructor"
    "enum-set-difference"
    "enum-set-indexer"
    "enum-set-intersection"
    "enum-set-member?"
    "enum-set-projection"
    "enum-set-subset?"
    "enum-set-union"
    "enum-set-universe"
    "enum-set=?"
    "environment"
    "eof-object"
    "eof-object?"
    "eq?"
    "equal?"
    "eqv?"
    "equal-hash"
    "error"
    "error?"
    "eval"
    "even?"
    "exact"
    "exact->inexact"
    "exact-integer-sqrt"
    "exact?"
    "exists"
    "exit"
    "exp"
    "expt"
    "file-exists?"
    "filter"
    "find"
    "finish-coroutines"
    "finite?"
    "fixnum->flonum"
    "fixnum-width"
    "fixnum?"
    "fl*"
    "fl+"
    "fl-"
    "fl/"
    "fl<=?"
    "fl<?"
    "fl=?"
    "fl!=?"
    "fl>=?"
    "fl>?"
    "flabs"
    "flacos"
    "flasin"
    "flatan"
    "flceiling"
    "flcos"
    "fldenominator"
    "fldiv"
    "fldiv-and-mod"
    "fldiv0"
    "fldiv0-and-mod0"
    "fleven?"
    "flexp"
    "flexpt"
    "flfinite?"
    "flfloor"
    "flinfinite?"
    "flinteger?"
    "fllog"
    "flmax"
    "flmin"
    "flmod"
    "flmod0"
    "flnan?"
    "flnegative?"
    "flnumerator"
    "flodd?"
    "flonum?"
    "floor"
    "flpositive?"
    "flround"
    "flsin"
    "flsqrt"
    "fltan"
    "fltruncate"
    "flush-output-port"
    "flzero?"
    "fold-left"
    "fold-right"
    "for-all"
    "for-each"
    "force"
    "free-identifier=?"
    "fx*"
    "fx*/carry"
    "fx+"
    "fx+/carry"
    "fx-"
    "fx-/carry"
    "fx<=?"
    "fx<?"
    "fx=?"
    "fx!=?"
    "fx>=?"
    "fx>?"
    "fxand"
    "fxarithmetic-shift"
    "fxarithmetic-shift-left"
    "fxarithmetic-shift-right"
    "fxbit-count"
    "fxbit-field"
    "fxbit-set?"
    "fxcopy-bit"
    "fxcopy-bit-field"
    "fxdiv"
    "fxdiv-and-mod"
    "fxdiv0"
    "fxdiv0-and-mod0"
    "fxeven?"
    "fxfirst-bit-set"
    "fxif"
    "fxior"
    "fxlength"
    "fxmax"
    "fxmin"
    "fxmod"
    "fxmod0"
    "fxnegative?"
    "fxnot"
    "fxodd?"
    "fxpositive?"
    "fxreverse-bit-field"
    "fxrotate-bit-field"
    "fxxor"
    "fxzero?"
    "gcd"
    "generate-temporaries"
    "get-bytevector-all"
    "get-bytevector-n"
    "get-bytevector-n!"
    "get-bytevector-some"
    "get-char"
    "get-datum"
    "get-line"
    "get-string-all"
    "get-string-n"
    "get-string-n!"
    "get-u8"
    "greatest-fixnum"
    "hashtable-clear!"
    "hashtable-contains?"
    "hashtable-copy"
    "hashtable-delete!"
    "hashtable-entries"
    "hashtable-equivalence-function"
    "hashtable-hash-function"
    "hashtable-keys"
    "hashtable-mutable?"
    "hashtable-ref"
    "hashtable-set!"
    "hashtable-size"
    "hashtable-update!"
    "hashtable?"
    "i/o-decoding-error?"
    "i/o-encoding-error-char"
    "i/o-encoding-error?"
    "i/o-error-filename"
    "i/o-error-port"
    "i/o-error-position"
    "i/o-error?"
    "i/o-file-already-exists-error?"
    "i/o-file-does-not-exist-error?"
    "i/o-file-is-read-only-error?"
    "i/o-file-protection-error?"
    "i/o-filename-error?"
    "i/o-invalid-position-error?"
    "i/o-port-error?"
    "i/o-read-error?"
    "i/o-write-error?"
    "identifier?"
    "imag-part"
    "implementation-restriction-violation?"
    "inexact"
    "inexact->exact"
    "inexact?"
    "infinite?"
    "input-port?"
    "integer->char"
    "integer-valued?"
    "integer?"
    "interaction-environment"
    "irritants-condition?"
    "latin-1-codec"
    "lcm"
    "least-fixnum"
    "length"
    "lexical-violation?"
    "list"
    "list->string"
    "list->vector"
    "list-ref"
    "list-sort"
    "list-tail"
    "list?"
    "log"
    "lookahead-char"
    "lookahead-u8"
    "magnitude"
    "make-assertion-violation"
    "make-bytevector"
    "make-custom-binary-input-port"
    "make-custom-binary-input/output-port"
    "make-custom-binary-output-port"
    "make-custom-textual-input-port"
    "make-custom-textual-input/output-port"
    "make-custom-textual-output-port"
    "make-enumeration"
    "make-eq-hashtable"
    "make-eqv-hashtable"
    "make-error"
    "make-hashtable"
    "make-i/o-decoding-error"
    "make-i/o-encoding-error"
    "make-i/o-error"
    "make-i/o-file-already-exists-error"
    "make-i/o-file-does-not-exist-error"
    "make-i/o-file-is-read-only-error"
    "make-i/o-file-protection-error"
    "make-i/o-filename-error"
    "make-i/o-invalid-position-error"
    "make-i/o-port-error"
    "make-i/o-read-error"
    "make-i/o-write-error"
    "make-implementation-restriction-violation"
    "make-irritants-condition"
    "make-lexical-violation"
    "make-message-condition"
    "make-no-infinities-violation"
    "make-no-nans-violation"
    "make-non-continuable-violation"
    "make-polar"
    "make-record-constructor-descriptor"
    "make-record-type-descriptor"
    "make-rectangular"
    "make-serious-condition"
    "make-string"
    "make-syntax-violation"
    "make-transcoder"
    "make-undefined-violation"
    "make-variable-transformer"
    "make-vector"
    "make-violation"
    "make-warning"
    "make-who-condition"
    "map"
    "max"
    "member"
    "memp"
    "memq"
    "memv"
    "message-condition?"
    "method-call-late-binding"
    "min"
    "mod"
    "mod0"
    "modulo"
    "nan?"
    "native-endianness"
    "native-eol-style"
    "native-transcoder"
    "negative?"
    "newline"
    "no-infinities-violation?"
    "no-nans-violation?"
    "non-continuable-violation?"
    "not"
    "null-environment"
    "null?"
    "number->string"
    "number?"
    "numerator"
    "odd?"
    "open-bytevector-input-port"
    "open-bytevector-output-port"
    "open-file-input-port"
    "open-file-input/output-port"
    "open-file-output-port"
    "open-input-file"
    "open-output-file"
    "open-string-input-port"
    "open-string-output-port"
    "output-port-buffer-mode"
    "output-port?"
    "pair?"
    "partition"
    "peek-char"
    "port-eof?"
    "port-has-port-position?"
    "port-has-set-port-position!?"
    "port-position"
    "port-transcoder"
    "port?"
    "positive?"
    "procedure?"
    "put-bytevector"
    "put-char"
    "put-datum"
    "put-string"
    "put-u8"
    "quotient"
    "rational-valued?"
    "rational?"
    "rationalize"
    "read"
    "read-char"
    "real->flonum"
    "real-part"
    "real-valued?"
    "real?"
    "record-accessor"
    "record-constructor"
    "record-field-mutable?"
    "record-mutator"
    "record-predicate"
    "record-rtd"
    "record-type-descriptor?"
    "record-constructor-descriptor?"
    "record-type-field-names"
    "record-type-generative?"
    "record-type-name"
    "record-type-opaque?"
    "record-type-parent"
    "record-type-sealed?"
    "record-type-uid"
    "record?"
    "remainder"
    "remove"
    "remp"
    "remq"
    "remv"
    "reset-coroutines!"
    "resume-coroutine"
    "reverse"
    "round"
    "scheme-report-environment"
    "serious-condition?"
    "set-car!"
    "set-cdr!"
    "set-port-position!"
    "simple-conditions"
    "sin"
    "sint-list->bytevector"
    "sqrt"
    "standard-error-port"
    "standard-input-port"
    "standard-output-port"
    "string"
    "string->bytevector"
    "string->list"
    "string->number"
    "string->symbol"
    "string->keyword"
    "string->utf16"
    "string->utf32"
    "string->utf8"
    "string-append"
    "string-ci-hash"
    "string-ci<=?"
    "string-ci<?"
    "string-ci=?"
    "string-ci>=?"
    "string-ci>?"
    "string-copy"
    "string-downcase"
    "string-fill!"
    "string-foldcase"
    "string-for-each"
    "string-hash"
    "string-length"
    "string-normalize-nfc"
    "string-normalize-nfd"
    "string-normalize-nfkc"
    "string-normalize-nfkd"
    "string-ref"
    "string-set!"
    "string-titlecase"
    "string-upcase"
    "string<=?"
    "string<?"
    "string=?"
    "string>=?"
    "string>?"
    "string?"
    "substring"
    "suspend-coroutine"
    "suspended-coroutine?"
    "symbol->string"
    "symbol-hash"
    "symbol=?"
    "symbol-max"
    "symbol-min"
    "symbol?"
    "syntax->datum"
    "syntax-violation"
    "syntax-violation-form"
    "syntax-violation-subform"
    "syntax-violation?"
    "syntax-parameter-value"
    "tan"
    "textual-port?"
    "transcoded-port"
    "transcoder-codec"
    "transcoder-eol-style"
    "transcoder-error-handling-mode"
    "truncate"
    "u8-list->bytevector"
    "uint-list->bytevector"
    "undefined-violation?"
    "unsafe-record-accessor"
    "unsafe-record-mutator"
    "utf-16-codec"
    "utf-8-codec"
    "utf16->string"
    "utf32->string"
    "utf8->string"
    "values"
    "vector"
    "vector->list"
    "vector-fill!"
    "vector-for-each"
    "vector-length"
    "vector-map"
    "vector-ref"
    "vector-set!"
    "vector-sort"
    "vector-sort!"
    "vector?"
    "violation?"
    "yield"
    "warning?"
    "who-condition?"
    "with-exception-handler"
    "with-input-from-file"
    "with-output-to-file"
    "write"
    "write-char"
    "zero?")
  "List of functions from the R6RS Scheme language libraries.

Notice that 'functions' does not mean 'procedures', in the Scheme
language sense, it means that  the words should be highlighted as
language built ins.")


;;;; lists of custom Chez Scheme symbols
;;
;;Here we should put lists of identifiers from our preferred libraries.
;;


(defconst chezscheme-warning-list
  '("FIXME" "WARNING" "XXX" "NOTE")
  "List of strings to be highlighted as warning when present in a comment.")

(defconst chezscheme-chezscheme-syntaxes-list
  '("reader-import"

    "begin0"
    "receive" "receive/std" "receive/checked"
    "receive-and-return" "receive-and-return/std" "receive-and-return/checked"
    "module" "include" "xor"
    "let*-values" "let*-syntax"
    "let-constants" "let*-constants" "letrec-constants" "letrec*-constants"
    "stale-when" "foreign-call" "case-identifiers"
    "internal-body"
    "let/std" "let/checked"
    "let*/std" "let*/checked"
    "letrec/std" "letrec/checked"
    "letrec*/std" "letrec*/checked"
    "define/std" "define/typed" "define/checked" "define/overload" "define/friend"
    "lambda/std" "lambda/typed" "lambda/checked"
    "returnable" "infix"
    "cond-expand"
    "do*" "dolist" "dotimes"
    "let-values" "let-values/std" "let-values/checked"
    "let*-values" "let*-values/std" "let*-values/checked"
    "hash"

    ;;Additional clauses for DEFINE-RECORD-TYPE and DEFINE-LABEL.
    "constructor" "destructor" "constructor-signature"
    "super-protocol" "destructor-protocol"
    "custom-predicate" "custom-printer"
    "method" "virtual-method" "seal-method"
    "define-type-descriptors" "strip-angular-parentheses"
    "type-predicate" "equality-predicate" "comparison-procedure" "hash-function"
    "mixins" "implements" "method-prototype"

    "expander-options" "compiler-options"

    "expansion-of" "expansion-of*" "visit-code-of"
    "optimisation-of" "optimisation-of*"
    "further-optimisation-of" "further-optimisation-of*"
    "assembly-of"

    "while" "until" "set-cons!" "values->list"
    "match"
    "with-arguments-validation" "with-implicits"
    "begin-for-syntax" "splice-first-expand" "expand-time-expr"

    "unsafe"

    "infix" "++" "--" "pre-incr!" "pre-decr!" "post-incr!" "post-decr!"
    "try" "catch" "finally"

    "unwind-protect" "with-unwind-protection" "with-unwind-handler"
    "with-escape-handlers-stack" "with-escape-handler" "run-escape-handlers"
    "with-blocked-exceptions" "with-current-dynamic-environment"

    "shift" "reset"

    "for" "only" "except" "rename" "prefix" "deprefix"
    "export" "options" "foreign-library"

    ;;These definition syntaxes are to be handled separately.
    ;;
    ;; "define*" "case-define" "case-define*"
    ;; "define-syntax*" "define-syntax-rule" "define-auxiliary-syntaxes"
    ;; "define-inline" "define-constant"
    ;; "define-values" "define-constant-values"

    "case-lambda/std" "case-lambda/typed" "case-lambda/checked"
    "named-lambda" "named-lambda/std" "named-lambda/typed" "named-lambda/checked"
    "named-case-lambda" "named-case-lambda/std" "named-case-lambda/typed" "named-case-lambda/checked"
    "lambda*" "case-lambda*" "named-case-lambda*" "named-lambda*"

    ;; generic syntaxes for typed values
    "type-descriptor" "type-unique-identifiers" "is-a?"
    "method-call" "new" "delete" "case-type"
    "assert-signature" "assert-signature-and-return"
    "cast-signature" "unsafe-cast-signature"
    "type-of" "type-annotation" "type-annotation=?"
    "type-annotation-super-and-sub?" "type-annotation-common-ancestor" "type-annotation-ancestors"
    "type-annotation-syntax" "type-annotation-matching"
    "type-signature-super-and-sub?" "type-signature-matching" "type-signature-union"  "type-signature-common-ancestor"

    "type-descriptor=?" "type-descriptor-parent" "type-descriptor-ancestors"
    "type-descriptor-super-and-sub?" "type-descriptor-matching"
    "descriptors-signature-matching"

    "make-parameter" "parametrise" "parameterise" "parameterize"

    "define-syntax-parameter"
    "syntax-parametrise" "syntax-parameterize" "syntax-parameterise"

    "predicate-procedure-argument-validation" "predicate-return-value-validation"

    "struct-type-descriptor" "struct-type-and-struct?"
    "struct-type-field-ref" "struct-type-field-set!"

    "record-type-descriptor" "record-constructor-descriptor"
    "record-type-and-record?"
    "record-type-field-ref" "record-type-field-set!"

    "check-for-true" "check-for-false" "with-result"
    "false-if-exception" "check-for-procedure-argument-violation"
    "check-for-expression-return-value-violation"

    "with-compensations"
    "with-compensations/on-error"
    "with-compensation-handler"
    "compensate"
    "push-compensation"

    "with-input-from-string"
    "with-local-storage"
    "with-output-to-port"
    "with-output-to-string"

    "time"

    ;; restarts
    "handler-case"
    "ignore-errors"
    "handler-bind"
    "restart-case"
    "with-condition-restarts"
    "with-return-to-signal-on-unhandled-exception"
    )
  "List of syntax identifiers from some Chez Scheme libraries.")

(defconst chezscheme-chezscheme-aux-syntaxes-list
  '("__who__" "__synner__" "__file__" "__line__" "<>" "this"
    "?" ":" "!" "%" "&" "^" "~" "<<" ">>" "⏐" "⏐⏐" "¦" "¦¦" "**" "=="
    "∧" "∨" "⊻" "¬" "×" "≠" "⋅"
    "brace" "return" "continue" "break" "with"
    "default-language" "typed-language" "strict-r6rs" "strict-type-checking" "predicate-type-propagation"
    "stdin" "stdout" "stderr"
    "pair" "pair-of" "list-of" "nelist-of" "vector-of" "nevector-of" "hashtable" "alist" "enumeration"
    "maybe"
    "parent-of" "ancestor-of"
    "private" "protected" "public")
  "List of auxiliary syntaxes from the Chezscheme libraries.")

(defconst chezscheme-chezscheme-functions-list
  '("acosh"
    "add1"
    "always-true"
    "always-false"
    "andmap"
    "annotation?"
    "annotation-expression"
    "annotation-source"
    "annotation-stripped"
    "annotation-textual-position"
    "apropos"
    "argv->bytevectors"
    "argv-length"
    "argv->strings"
    "array-ref-c-double"
    "array-ref-c-float"
    "array-ref-c-off_t"
    "array-ref-c-pointer"
    "array-ref-c-ptrdiff_t"
    "array-ref-c-signed-char"
    "array-ref-c-signed-int"
    "array-ref-c-signed-long"
    "array-ref-c-signed-long-long"
    "array-ref-c-signed-short"
    "array-ref-c-sint16"
    "array-ref-c-sint32"
    "array-ref-c-sint64"
    "array-ref-c-sint8"
    "array-ref-c-size_t"
    "array-ref-c-ssize_t"
    "array-ref-c-uint16"
    "array-ref-c-uint32"
    "array-ref-c-uint64"
    "array-ref-c-uint8"
    "array-ref-c-unsigned-char"
    "array-ref-c-unsigned-int"
    "array-ref-c-unsigned-long"
    "array-ref-c-unsigned-long-long"
    "array-ref-c-unsigned-short"
    "array-set-c-double!"
    "array-set-c-float!"
    "array-set-c-off_t!"
    "array-set-c-pointer!"
    "array-set-c-ptrdiff_t!"
    "array-set-c-signed-char!"
    "array-set-c-signed-int!"
    "array-set-c-signed-long!"
    "array-set-c-signed-long-long!"
    "array-set-c-signed-short!"
    "array-set-c-sint16!"
    "array-set-c-sint32!"
    "array-set-c-sint64!"
    "array-set-c-sint8!"
    "array-set-c-size_t!"
    "array-set-c-ssize_t!"
    "array-set-c-uint16!"
    "array-set-c-uint32!"
    "array-set-c-uint64!"
    "array-set-c-uint8!"
    "array-set-c-unsigned-char!"
    "array-set-c-unsigned-int!"
    "array-set-c-unsigned-long!"
    "array-set-c-unsigned-long-long!"
    "array-set-c-unsigned-short!"
    "asinh"
    "assembler-output"
    "assembler-property-key"
    "atanh"
    "base-rtd"
    "base64->bytevector"
    "bignum?"
    "bignum->bytevector"
    "boolean!=?"
    "boolean<?"
    "boolean>?"
    "boolean<=?"
    "boolean>=?"
    "boolean-min"
    "boolean-max"
    "bwp-object?"
    "bwp-object"
    "bytevector!=?"
    "bytevector-u8<?"
    "bytevector-u8>?"
    "bytevector-u8<=?"
    "bytevector-u8>=?"
    "bytevector-u8-min"
    "bytevector-u8-max"
    "bytevector-s8<?"
    "bytevector-s8>?"
    "bytevector-s8<=?"
    "bytevector-s8>=?"
    "bytevector-s8-min"
    "bytevector-s8-max"
    "bytevector-append"
    "bytevector-empty?"
    "bytevector->base64"
    "bytevector->bignum"
    "bytevector->c4b-list"
    "bytevector->c4l-list"
    "bytevector->c4n-list"
    "bytevector->c8b-list"
    "bytevector->c8l-list"
    "bytevector->c8n-list"
    "bytevector->cstring"
    "bytevector->cstring*"
    "bytevector->f4b-list"
    "bytevector->f4l-list"
    "bytevector->f4n-list"
    "bytevector->f8b-list"
    "bytevector->f8l-list"
    "bytevector->f8n-list"
    "bytevector->flonum"
    "bytevector->guarded-cstring"
    "bytevector->guarded-cstring*"
    "bytevector->guarded-memory"
    "bytevector->guarded-memory*"
    "bytevector->hex"
    "bytevector->memory"
    "bytevector->memory*"
    "bytevector-port-buffer-size"
    "bytevector-concatenate"
    "bytevector-reverse-and-concatenate"
    "bytevector->s16b-list"
    "bytevector->s16l-list"
    "bytevector->s16n-list"
    "bytevector->s32b-list"
    "bytevector->s32l-list"
    "bytevector->s32n-list"
    "bytevector->s64b-list"
    "bytevector->s64l-list"
    "bytevector->s64n-list"
    "bytevector->s8-list"
    "bytevectors->argv"
    "bytevectors->argv*"
    "bytevectors->guarded-argv"
    "bytevectors->guarded-argv*"
    "bytevector->string-base64"
    "bytevector->string-hex"
    "bytevector->u16b-list"
    "bytevector->u16l-list"
    "bytevector->u16n-list"
    "bytevector->u32b-list"
    "bytevector->u32l-list"
    "bytevector->u32n-list"
    "bytevector->u64b-list"
    "bytevector->u64l-list"
    "bytevector->u64n-list"
    "c4b-list->bytevector"
    "c4l-list->bytevector"
    "c4n-list->bytevector"
    "c8b-list->bytevector"
    "c8l-list->bytevector"
    "c8n-list->bytevector"
    "cafe-input-port"
    "call/cf"
    "calloc"
    "calloc*"
    "cbrt"
    "cflonum?"
    "chmax"
    "chmin"
    "code?"
    "collect"
    "collection-avoidance-list"
    "collect-key"
    "command-line-arguments"
    "complex-conjugate"
    "compnum?"
    "compound-condition?"
    "condition-and-rtd?"
    "condition-errno"
    "condition-h_errno"
    "cons"
    "cons*"
    "console-error-port"
    "console-input-port"
    "console-output-port"
    "cosh"
    "cstring16be->string"
    "cstring16->bytevector"
    "cstring16le->string"
    "cstring16n->string"
    "cstring->bytevector"
    "cstring->bytevector*"
    "cstring->string"
    "cube"
    "current-core-eval"
    "current-time"
    "date-string"
    "debug-print"
    "debug-print*"
    "debug-print-enabled?"
    "default-struct-printer"
    "default-struct-printer-details"
    "die"
    "directory-exists?"
    "engine-handler"
    "enum-set?"
    "environ"
    "environment?"
    "environment-binding"
    "environment-labels"
    "environment-libraries"
    "environment-symbols"
    "errno"
    ;; &errno
    "errno-condition?"
    "exact-integer?"
    "zero-exact-integer?"
    "negative-exact-integer?"
    "positive-exact-integer?"
    "non-negative-exact-integer?"
    "non-positive-exact-integer?"
    ;; "dlopen"
    ;; "dlclose"
    ;; "dlerror"
    ;; "dlsym"
    "exit-hooks"
    "expand-form-to-core-language"
    "expand-library"
    "expand-library->sexp"
    "expand-top-level-program"
    "expand-top-level-program->sexp"
    "f4b-list->bytevector"
    "f4l-list->bytevector"
    "f4n-list->bytevector"
    "f8b-list->bytevector"
    "f8l-list->bytevector"
    "f8n-list->bytevector"
    "factorial"
    "fasl-read"
    "fasl-write"
    "filename->string-func"
    "fixnum->char"
    "char->fixnum"
    "fixnum->string"
    "flacosh"
    "flasinh"
    "flatanh"
    "flcbrt"
    "flcosh"
    "flcube"
    "flexpm1"
    "flhypot"
    "fllog1p"
    "flnonnegative?"
    "flnonpositive?"
    "positive-flonum?"
    "negative-flonum?"
    "non-negative-flonum?"
    "non-positive-flonum?"
    "flonum-bytes"
    "flonum->bytevector"
    "flonum-parts"
    "flonum->string"
    "flsinh"
    "flsquare"
    "fltanh"
    "flzero?/negative"
    "flzero?/positive"
    "for-each-in-order"
    "forget-to-avoid-collecting"
    "format"
    "fprintf"
    "free"
    "fx<"
    "fx<="
    "fx="
    "fx!="
    "fx>"
    "fx>="
    "fxabs"
    "fxadd1"
    "fxlogand"
    "fxlognot"
    "fxlogor"
    "fxlogxor"
    "fxmodulo"
    "fxnonnegative?"
    "fxnonpositive?"
    "non-zero-fixnum?"
    "positive-fixnum?"
    "negative-fixnum?"
    "non-negative-fixnum?"
    "non-positive-fixnum?"
    "fxquotient"
    "fxremainder"
    "fxsign"
    "fxsll"
    "fxsra"
    "fxsub1"
    "gensym"
    "gensym?"
    "gensym-count"
    "gensym-prefix"
    "gensym->unique-string"
    "get-annotated-datum"
    "get-char-and-track-textual-position"
    "getenv"
    "get-output-string"
    "getprop"
    "get-string-some"
    "guarded-calloc"
    "guarded-calloc*"
    "guarded-malloc"
    "guarded-malloc*"
    "guarded-realloc"
    "guarded-realloc*"
    "guarded-strdup"
    "guarded-strdup*"
    "guarded-strndup"
    "guarded-strndup*"
    "hashtable-map-keys"
    "hashtable-map-entries"
    "hashtable-for-each-entry"
    "hashtable-for-each-key"
    "hashtable-for-all-keys"
    "hashtable-for-all-entries"
    "hashtable-exists-key"
    "hashtable-exists-entry"
    "hashtable-find-key"
    "hashtable-find-entry"
    "hashtable-fold-keys"
    "hashtable-fold-entries"
    "hashtable->alist"
    "alist->hashtable!"
    ;; &h_errno
    "h_errno-condition?"
    "hex->bytevector"
    "host-info"
    "immediate?"
;;; "import"
;;; "include"
    "input-file-buffer-size"
    "input/output-file-buffer-size"
    "input/output-socket-buffer-size"
    "integer->machine-word"
    "integer->pointer"
    "interaction-environment"
    "interrupted-condition?"
    "interrupt-handler"
    ;; &i/o-eagain
    "i/o-eagain-error?"
    "keyword=?"
    "keyword?"
    "keyword-hash"
    "keyword->symbol"
    "keyword->string"
    "last-pair"
    "list-of-booleans?"
    "list-of-bytevectors?"
    "list-of-chars?"
    "list-of-fixnums?"
    "list-of-flonums?"
    "list-of-strings?"
    "list-of-symbols?"
    "list-of-pointers?"
    "load"
    "lookahead-two-u8"
    "machine-word->integer"
    "make-binary-file-descriptor-input/output-port"
    "make-binary-file-descriptor-input/output-port*"
    "make-binary-file-descriptor-input-port"
    "make-binary-file-descriptor-input-port*"
    "make-binary-file-descriptor-output-port"
    "make-binary-file-descriptor-output-port*"
    "make-binary-socket-input-port"
    "make-binary-socket-input-port*"
    "make-binary-socket-output-port"
    "make-binary-socket-output-port*"
    "make-binary-socket-input/output-port"
    "make-binary-socket-input/output-port*"
    ;; "make-c-callout-maker"
    ;; "make-c-callout-maker/with-errno"
    ;; "make-c-callback-maker"
    ;; "free-c-callback"
    "make-expand-time-value"
    "expand-time-value?"
    "expand-time-value-object"
    ;;"retrieve-expand-time-value"
    "make-synonym-transformer"
    "synonym-transformer?"
    "synonym-transformer-identifier"
    "make-errno-condition"
    "make-file-options"
    "make-guardian"
    "make-h_errno-condition"
    "make-interrupted-condition"
    "make-i/o-eagain"
    "make-list"
    "make-memory-block"
    "make-memory-block/guarded"
    "make-out-of-memory-error"
    "make-parameter"
    "make-queue-procs"
    "make-readline-input-port"
    "make-source-position-condition"
    "make-struct-type"
    "make-textual-file-descriptor-input/output-port"
    "make-textual-file-descriptor-input/output-port*"
    "make-textual-file-descriptor-input-port"
    "make-textual-file-descriptor-input-port*"
    "make-textual-file-descriptor-output-port"
    "make-textual-file-descriptor-output-port*"
    "make-textual-socket-input-port"
    "make-textual-socket-input-port*"
    "make-textual-socket-output-port"
    "make-textual-socket-output-port*"
    "make-textual-socket-input/output-port"
    "make-textual-socket-input/output-port*"
    "make-time"
    "make-traced-macro"
    "make-traced-procedure"
    "make-promise"
    "malloc"
    "malloc*"
    "memcmp"
    "memcpy"
    "memmove"
    "memory-block?"
    "memory-block?/non-null"
    "memory-block?/not-null"
    "memory-block-pointer"
    "memory-block-reset"
    "memory-block-size"
    "memory->bytevector"
    "memory-copy"
    "memset"
;;; "module"
    "mutable-hashtable?"
    "neq?"
    "new-cafe"
    "new-interaction-environment"
    "non-negative?"
    "non-positive?"
    "null-memory-block"
    "null-pointer"
    "open-string-input-port/id"
    "optimizer-output"
    "ormap"
    ;; &out-of-memory-error
    "out-of-memory-error?"
    "out-of-memory-error.clean?"
    "out-of-memory-error.number-of-bytes"
    "out-of-memory-error.old-pointer"
    "output-file-buffer-size"
    "pathname->string-func"
    "pointer<=?"
    "pointer!=?"
    "pointer<?"
    "pointer=?"
    "pointer>=?"
    "pointer>?"
    "pointer-min"
    "pointer-max"
    "pointer?"
    ;; "maybe-pointer?"
    ;; "false-or-pointer?"
    "pointer-add"
    "pointer-and-offset?"
    "pointer-clone"
    "pointer-diff"
    "pointer->integer"
    "pointer-null?"
    "pointer-non-null?"
    "pointer-ref-c-double"
    "pointer-ref-c-float"
    "pointer-ref-c-off_t"
    "pointer-ref-c-pointer"
    "pointer-ref-c-ptrdiff_t"
    "pointer-ref-c-signed-char"
    "pointer-ref-c-signed-int"
    "pointer-ref-c-signed-long"
    "pointer-ref-c-signed-long-long"
    "pointer-ref-c-signed-short"
    "pointer-ref-c-sint16"
    "pointer-ref-c-sint32"
    "pointer-ref-c-sint64"
    "pointer-ref-c-sint8"
    "pointer-ref-c-size_t"
    "pointer-ref-c-ssize_t"
    "pointer-ref-c-uint16"
    "pointer-ref-c-uint32"
    "pointer-ref-c-uint64"
    "pointer-ref-c-uint8"
    "pointer-ref-c-unsigned-char"
    "pointer-ref-c-unsigned-int"
    "pointer-ref-c-unsigned-long"
    "pointer-ref-c-unsigned-long-long"
    "pointer-ref-c-unsigned-short"
    "pointer-set-c-double!"
    "pointer-set-c-float!"
    "pointer-set-c-off_t!"
    "pointer-set-c-pointer!"
    "pointer-set-c-ptrdiff_t!"
    "pointer-set-c-signed-char!"
    "pointer-set-c-signed-int!"
    "pointer-set-c-signed-long!"
    "pointer-set-c-signed-long-long!"
    "pointer-set-c-signed-short!"
    "pointer-set-c-sint16!"
    "pointer-set-c-sint32!"
    "pointer-set-c-sint64!"
    "pointer-set-c-sint8!"
    "pointer-set-c-size_t!"
    "pointer-set-c-ssize_t!"
    "pointer-set-c-uint16!"
    "pointer-set-c-uint32!"
    "pointer-set-c-uint64!"
    "pointer-set-c-uint8!"
    "pointer-set-c-unsigned-char!"
    "pointer-set-c-unsigned-int!"
    "pointer-set-c-unsigned-long!"
    "pointer-set-c-unsigned-long-long!"
    "pointer-set-c-unsigned-short!"
    "pointer-value"
    "port-closed?"
    "port-dump-status"
    "port-fd"
    "port-getprop"
    "port-hash"
    "port-id"
    "port-in-non-blocking-mode?"
    "port-mode"
    "port-property-list"
    "port-putprop"
    "port-remprop"
    "port-set-non-blocking-mode!"
    "port-textual-position"
    "port-uid"
    "port-unset-non-blocking-mode!"
    "post-gc-hooks"
    "pretty-format"
    "pretty-print"
    "pretty-print*"
    "pretty-width"
    "print-condition"
    "printer-integer-radix"
    "print-error"
    "printf"
    "print-gensym"
    "print-graph"
    "print-unicode"
    "procedure-annotation"
    "promise?"
    "property-list"
    "purge-collection-avoidance-list"
    "push-compensation-thunk"
    "putprop"
    "quotient+remainder"
    "random"
    "ratnum?"
    "raise"
    "raise-continuable"
    "readline"
    "read-line"
    "readline-enabled?"
    "realloc"
    "realloc*"
    ;; "receive"
    ;; "receive-and-return"
    "record-destructor"
    "record-destructor-set!"
    "record-guardian-log"
    "record-guardian-logger"
    "record=?"
    "record-reset!"
    "record-object?"
    "record-and-rtd?"
;;; "record-type-and-record?"
    "register-to-avoid-collecting"
    "remprop"
    "replace-to-avoid-collecting"
    "reset-input-port!"
    "reset-output-port!"
    "reset-symbol-proc!"
    "retrieve-to-avoid-collecting"
    "run-compensations"
    "s16b-list->bytevector"
    "s16l-list->bytevector"
    "s16n-list->bytevector"
    "s32b-list->bytevector"
    "s32l-list->bytevector"
    "s32n-list->bytevector"
    "s64b-list->bytevector"
    "s64l-list->bytevector"
    "s64n-list->bytevector"
    "s8-list->bytevector"
    "set-pointer-null!"
    "set-port-buffer-mode!"
    "set-port-mode!"
    "set-struct-type-destructor!"
    "set-struct-type-printer!"
    "set-symbol-value!"
    "sign"
    "sinh"
    "sll"
    "source-position-byte"
    "source-position-character"
    "source-position-column"
    "source-position-condition?"
    "source-position-line"
    "source-position-port-id"
    "square"
    "sra"
    "stats?"
    "stats-bytes-major"
    "stats-bytes-minor"
    "stats-collection-id"
    "stats-gc-real-secs"
    "stats-gc-real-usecs"
    "stats-gc-sys-secs"
    "stats-gc-sys-usecs"
    "stats-gc-user-secs"
    "stats-gc-user-usecs"
    "stats-real-secs"
    "stats-real-usecs"
    "stats-sys-secs"
    "stats-sys-usecs"
    "stats-user-secs"
    "stats-user-usecs"
    "strcmp"
    "strdup"
    "strdup*"
    "strerror"
    "string-max"
    "string-min"
    "string!=?"
    "string-empty?"
    "string-base64->bytevector"
    "string-copy!"
    "string->cstring"
    "string->cstring*"
    "string->filename-func"
    "string->flonum"
    "string->guarded-cstring"
    "string->guarded-cstring*"
    "string-hex->bytevector"
    "string-or-symbol->string"
    "string-or-symbol->symbol"
    "string->pathname-func"
    "string-port-buffer-size"
    "string-concatenate"
    "string-reverse-and-concatenate"
    "strings->argv"
    "strings->argv*"
    "strings->guarded-argv"
    "strings->guarded-argv*"
    "string->utf16be"
    "string->utf16le"
    "string->utf16n"
    "strlen"
    "strncmp"
    "strndup"
    "strndup*"
    "struct=?"
    "struct?"
    "struct-destructor"
    "struct-guardian-log"
    "struct-guardian-logger"
    "struct-length"
    "struct-name"
    "struct-printer"
    "struct-ref"
    "struct-reset!"
    "struct-std"
    "struct-set!"
    "struct-type-name"
    "struct-type-symbol"
    "struct-type-constructor"
    "struct-type-predicate"
    "struct-type-destructor"
    "struct-type-field-names"
    "struct-type-descriptor?"
    "struct-type-field-accessor"
    "struct-type-field-mutator"
    ;;"struct-type-field-method"
    "sub1"
    "subbytevector-s8"
    "subbytevector-s8/count"
    "subbytevector-u8"
    "subbytevector-u8/count"
    "subvector"
    "symbol-bound?"
    "symbol->keyword"
    "symbol-value"
    "symbol!=?"
    "symbol<?"
    "symbol<=?"
    "symbol>?"
    "symbol>=?"
    "syntax-object?"
    "stx?"
    "stx-expr"
    "stx-mark*"
    "stx-rib*"
    "stx-annotated-expr*"
    "syntax-transpose"
    "system-value"
    "system-value-gensym"
    "system-label"
    "system-label-gensym"
    "system-id"
    "system-id-gensym"
    "tanh"
    "time<=?"
    "time<?"
    "time=?"
    "time>=?"
    "time>?"
    "time?"
    "time-addition"
    "time-and-gather"
    "time-difference"
    "time-from-now"
    "time-gmt-offset"
    "time-it"
    "time-nanoseconds"
    "time-seconds"
    "top-level-value"
    "top-level-bound?"
    "set-top-level-value!"
    ;; let*-syntax"
    ;; let-constants
    ;; let*-constants
    ;; letrec-constants
    ;; letrec*-constants
    ;; trace-define
    ;; trace-define-syntax
    ;; trace-lambda
    ;; trace-let
    ;; trace-letrec-syntax
    ;; trace-let-syntax
    "transcoder?"
    "u16b-list->bytevector"
    "u16l-list->bytevector"
    "u16n-list->bytevector"
    "u32b-list->bytevector"
    "u32l-list->bytevector"
    "u32n-list->bytevector"
    "u64b-list->bytevector"
    "u64l-list->bytevector"
    "u64n-list->bytevector"
    "unbound-object"
    "unbound-object?"
    "unicode-printable-char?"
    "unwinding-call/cc"
    "utf-16be-codec"
    "utf16be->string"
    "utf-16le-codec"
    "utf16le->string"
    "utf-16n-codec"
    "utf16n->string"
    "utf-bom-codec"
    "uuid"
    "variable-transformer?"
    "variable-transformer-procedure"
    "vector-append"
    "vector-copy"
    "vector-copy!"
    "vector-empty?"
    "vector-exists"
    "vector-find"
    "vector-for-all"
    "vector-fold-left"
    "vector-fold-right"
    "vector-resize"
    "verbose-timer"
    "chezscheme-argv0"
    "chezscheme-argv0-string"
    "void"
    "void-object?"
    "waiter-prompt-string"
    "warning"
    "weak-cons"
    "weak-pair?"
    "with-input-from-string"
    "with-output-to-port"
    "with-output-to-string"
    "would-block-object"
    "would-block-object?"
    "char-in-ascii-range?"
    "fixnum-in-character-range?"
    "identifier->string"
    "string->identifier"
    "identifier-prefix"
    "identifier-suffix"
    "identifier-append"
    "identifier-format"
    "duplicate-identifiers?"
    "delete-duplicate-identifiers"
    "identifier-memq"
    "identifier-record-constructor"
    "identifier-record-predicate"
    "identifier-record-field-accessor"
    "identifier-record-field-mutator"
    "identifier-struct-constructor"
    "identifier-struct-predicate"
    "identifier-struct-field-accessor"
    "identifier-struct-field-mutator"
    "identifier-bound?"
    "syntax-car"
    "syntax-cdr"
    "syntax->list"
    "identifiers->list"
    "all-identifiers?"
    "syntax->vector"
    "parse-logic-predicate-syntax"
    "syntax-unwrap"
    "syntax=?"
    "identifier=symbol?"
    "syntax-clauses-unwrap"
    "syntax-clauses-filter"
    "syntax-clauses-remove"
    "syntax-clauses-partition"
    "syntax-clauses-collapse"
    "syntax-clauses-verify-at-least-once"
    "syntax-clauses-verify-at-most-once"
    "syntax-clauses-verify-exactly-once"
    "syntax-clauses-verify-mutually-inclusive"
    "syntax-clauses-verify-mutually-exclusive"
    "make-syntax-clause-spec"
    "syntax-clause-spec?"
    "syntax-clause-spec-keyword"
    "syntax-clause-spec-min-number-of-occurrences"
    "syntax-clause-spec-max-number-of-occurrences"
    "syntax-clause-spec-min-number-of-arguments"
    "syntax-clause-spec-max-number-of-arguments"
    "syntax-clause-spec-mutually-inclusive"
    "syntax-clause-spec-mutually-exclusive"
    "syntax-clause-spec-custom-data"
    "syntax-clauses-single-spec"
    "syntax-clauses-fold-specs"
    "syntax-clauses-validate-specs"

    "syntactic-binding-putprop"
    "syntactic-binding-getprop"
    "syntactic-binding-remprop"
    "syntactic-binding-property-list"

    "uname"
    "utsname?"
    "utsname-sysname"
    "utsname-nodename"
    "utsname-release"
    "utsname-version"
    "utsname-machine"
    "implementation-name"
    "implementation-version"
    "cpu-architecture"
    "machine-name"
    "os-name"
    "os-version"
    ;; &procedure-argument-violation
    "make-procedure-argument-violation"
    "procedure-argument-violation?"
    "procedure-argument-violation"
    ;; &expression-return-value-violation
    "make-expression-return-value-violation"
    "expression-return-value-violation?"
    "expression-return-value-violation"
    "bignum-positive?"
    "bignum-negative?"
    "bignum-non-negative?"
    "bignum-non-positive?"
    "bignum-odd?"
    "bignum-even?"
    "least-positive-bignum"
    "greatest-negative-bignum"
    "list-of-bytevectors?"
    "bytevector-length?"		"bytevector-index?"
    "bytevector-word-size?"		"bytevector-word-count?"
    "bytevector-index-for-word?"
    "bytevector-index-for-word8?"
    "bytevector-index-for-word16?"
    "bytevector-index-for-word32?"
    "bytevector-index-for-word64?"
    "bytevector-index-for-single-flonum?"
    "bytevector-index-for-double-flonum?"
    "bytevector-start-index-and-count-for-word?"
    "bytevector-start-index-and-count-for-word8?"
    "bytevector-start-index-and-count-for-word16?"
    "bytevector-start-index-and-count-for-word32?"
    "bytevector-start-index-and-count-for-word64?"
    "octets->string"			"string->octets"
    "octets-encoded-bytevector?"	"octets-encoded-string?"
    "ascii->string"			"string->ascii"
    "latin1->string"			"string->latin1"
    "ascii-encoded-bytevector?"		"latin1-encoded-bytevector?"
    "ascii-encoded-string?"		"latin1-encoded-string?"
    "string->uri-encoding"		"uri-encoding->string"
    "string->percent-encoding"		"percent-encoding->string"
    "uri-decode"			"percent-decode"
    "uri-encode"			"percent-encode"
    "normalise-uri-encoding"		"normalise-percent-encoding"
    "uri-encoded-bytevector?"		"percent-encoded-bytevector?"
    "uri-encoded-string?"		"percent-encoded-string?"

    "validate-with-predicate"
    "tag-identifier?"
    "all-tag-identifiers?"
    "tag-super-and-sub?"
    "tag-common-ancestor"
    "tag-identifier-ancestry"
    "formals-signature-super-and-sub-syntax?"

    "set-tag-identifier-callable-signature!"
    "tag-identifier-callable-signature"
    "fabricate-procedure-tag-identifier"

    "top-tag-id"
    "void-tag-id"
    "procedure-tag-id"
    "predicate-tag-id"
    "list-tag-id"
    "boolean-tag-id"
    "struct-tag-id"
    "record-tag-id"

    "identifier-object-type-spec"
    "set-identifier-object-type-spec!"
    "set-label-object-type-spec!"
    "label-object-type-spec"
    "make-object-type-spec"
    "object-type-spec?"
    "object-type-spec-uids"
    "object-type-spec-type-id"
    "object-type-spec-pred-stx"
    "object-type-spec-constructor-maker"
    "object-type-spec-accessor-maker"
    "object-type-spec-mutator-maker"
    "object-type-spec-getter-maker"
    "object-type-spec-setter-maker"
    "object-type-spec-dispatcher"
    "object-type-spec-parent-spec"
    "object-type-spec-ancestry"

    ;; "set-predicate-assertion-procedure-argument-validation!"
    ;; "predicate-assertion-procedure-argument-validation"
    ;; "set-predicate-assertion-return-value-validation!"
    ;; "predicate-assertion-return-value-validation"

    "set-identifier-unsafe-variant!"

    "tagged-identifier-syntax?"
    "list-of-tagged-bindings?"
    "tagged-lambda-proto-syntax?"
    "tagged-formals-syntax?"
    "standard-formals-syntax?"
    "formals-signature-syntax?"
    "retvals-signature-syntax?"
    "parse-tagged-identifier-syntax"
    "parse-list-of-tagged-bindings"
    "parse-tagged-lambda-proto-syntax"
    "parse-tagged-formals-syntax"

    "make-clambda-compound"			"clambda-compound?"
    "clambda-compound-common-retvals-signature"	"clambda-compound-lambda-signatures"

    "make-lambda-signature"			"lambda-signature?"
    "lambda-signature-formals"			"lambda-signature-retvals"
    "lambda-signature-formals-tags"		"lambda-signature-retvals-tags"
    "lambda-signature=?"

    "make-formals-signature"			"formals-signature?"
    "formals-signature-tags"			"formals-signature=?"

    "make-retvals-signature"			"make-retvals-signature-single-value"
    "make-retvals-signature-fully-unspecified"
    "retvals-signature?"
    "retvals-signature-tags"			"retvals-signature=?"
    "retvals-signature-common-ancestor"
    "make-fully-unspecified-retvals-signature"

    "tagged-identifier?"
    "set-identifier-tag!"	"override-identifier-tag!"	"identifier-tag"
    "set-label-tag!"		"override-label-tag!"		"label-tag"

    "set-identifier-callable-signature!"	"identifier-callable-signature"
    "set-label-callable-signature!"		"label-callable-signature"

    "expand-time-type-signature-violation?"
    "expand-time-retvals-signature-violation?"
    "expand-time-retvals-signature-violation-expected-signature"
    "expand-time-retvals-signature-violation-returned-signature"

    "print-identifier-info"

    "input/output-port?"
    "binary-input-port?"
    "textual-input-port?"
    "binary-output-port?"
    "textual-output-port?"
    "binary-input/output-port?"
    "textual-input/output-port?"

    "mkdir"
    "mkdir/parents"
    "real-pathname"
    "file-pathname?"
    "file-string-pathname?"
    "file-bytevector-pathname?"
    "file-absolute-pathname?"
    "file-relative-pathname?"
    "file-string-absolute-pathname?"
    "file-string-relative-pathname?"
    "file-bytevector-absolute-pathname?"
    "file-bytevector-relative-pathname?"
    "file-colon-search-path?"
    "file-string-colon-search-path?"
    "file-bytevector-colon-search-path?"
    "list-of-pathnames?"
    "list-of-string-pathnames?"
    "list-of-bytevector-pathnames?"
    "file-modification-time"
    "split-pathname-root-and-tail"
    "search-file-in-environment-path"
    "search-file-in-list-path"
    "split-pathname"
    "split-pathname-bytevector"
    "split-pathname-string"
    "split-search-path"
    "split-search-path-bytevector"
    "split-search-path-string"

    "library-binary-search-path"
    "library-source-search-path"
    "library-cache-search-path"
    "library-extensions"
    "compiled-libraries-cache-directory"
    "compiled-libraries-build-directory"
    "library-name->filename-stem"
    "library-reference->filename-stem"
    "directory+library-stem->library-binary-pathname"
    "directory+library-stem->library-source-pathname"
    "library-name->library-binary-pathname-in-build-directory"
    "library-reference->library-binary-pathname-in-build-directory"
    "library-source-pathname->library-binary-pathname-in-cache-directory"
    "library-source-pathname->library-stem-pathname"
    "library-source-pathname->library-binary-tail-pathname"
    "program-source-pathname->program-binary-pathname"

    "current-library-locator"
    "run-time-library-locator"
    "compile-time-library-locator"
    "source-library-locator"
    "current-library-source-search-path-scanner"
    "current-library-binary-search-path-scanner"
    "current-library-cache-search-path-scanner"
    "default-library-source-search-path-scanner"
    "default-library-binary-search-path-scanner"
    "default-library-cache-search-path-scanner"
    "conforming-library-name-and-library-reference?"
    "conforming-sub-version-and-sub-version-reference?"
    "conforming-version-and-version-reference?"
    "library-name<=?"
    "library-name<?"
    "library-name=?"
    "library-name?"
    "library-name-decompose"
    "library-name->identifiers"
    "library-name-identifiers=?"
    "library-name->version"
    "library-reference?"
    "library-reference-decompose"
    "library-reference->identifiers"
    "library-reference-identifiers=?"
    "library-reference->version-reference"
    "library-sub-version-reference?"
    "library-sub-version?"
    "library-version<=?"
    "library-version<?"
    "library-version=?"
    "library-version-number?"
    "library-version-numbers?"
    "library-version-reference?"

    "library?"
    "library-uid"
    "library-name"
    "library-imp-lib*"
    "library-vis-lib*"
    "library-inv-lib*"
    "library-export-subst"
    "library-global-env"
    "library-visit-state"
    "library-invoke-state"
    "library-visit-code"
    "library-invoke-code"
    "library-guard-code"
    "library-guard-lib*"
    "library-visible?"
    "library-source-file-name"
    "library-option*"
    "library-loaded-from-source-file?"
    "library-loaded-from-binary-file?"
    "library-descriptor"
    "library-descriptor?"
    "library-descriptor-uid"
    "library-descriptor-name"

    "find-library-by-name"
    "find-library-by-reference"
    "find-library-by-descriptor"
    "find-library-in-collection-by-predicate"
    "find-library-in-collection-by-name"
    "find-library-in-collection-by-reference"
    "find-library-in-collection-by-descriptor"

    "interned-libraries"
    "unintern-library"
    "visit-library"
    "invoke-library"

    "current-library-loader"
    "default-library-loader"
    "current-source-library-loader"
    "current-binary-library-loader"

    "current-library-expander"

    "current-include-loader"
    "default-include-loader"
    "default-include-file-locator"
    "default-include-file-loader"
    "current-include-file-locator"
    "current-include-file-loader"

    "map1" "for-each1" "for-all1" "exists1"

    "make-compile-time-error"
    "compile-time-error?"
    "make-compile-time-arity-error"
    "compile-time-arity-error?"
    "make-compile-time-core-type-error"
    "compile-time-core-type-error?"
    "make-compile-time-operand-core-type-error"
    "compile-time-operand-core-type-error?"
    "make-compile-time-retval-core-type-error"
    "compile-time-retval-core-type-error?"

    "make-non-reinstatable-violation"
    "non-reinstatable-violation?"
    "non-reinstatable-violation"

    ;; hash functions
    "bytevector-hash"
    "fixnum-hash"
    "exact-integer-hash"
    "flonum-hash"
    "number-hash"
    "char-hash"
    "char-ci-hash"
    "boolean-hash"
    "void-hash"
    "eof-object-hash"
    "would-block-hash"
    "struct-hash"
    "record-hash"
    "object-hash"

    ;; restarts
    "signal"
    "find-restart"
    "invoke-restart"
    "restart-name"
    "compute-restarts"
    "use-value"
    "store-value"
    "continue-restart"
    "abort-restart"
    "make-restarts-error-condition"
    "restarts-error-condition?"
    "make-restarts-control-error"
    "restarts-control-error?"
    "signal-restarts-control-error"
    "make-undefined-restart-error"
    "undefined-restart-error?"
    "raise-undefined-restart-error"
    )
  "List of function identifiers from the Chez Scheme libraries.")


;;;; lists of custom symbols

(defconst chezscheme-clos-syntaxes-list
  '( ;;These definitions are to be handled separately.
    ;;
    ;; "define-class" "define-generic" "define-method"
    "call-next-method" "next-method?"
    "with-slots")
  "List of syntax identifiers from the Scheme CLOS-like libraries.")

(defconst chezscheme-clos-functions-list
  '("add-method"
    "make" "make*" "make-from-fields" "make-generic" "make-generic-function"
    "class-of" "class-slots" "class-direct-slots"
    "class-definition-name" "class-precedence-list"
    "class?" "instance?" "subclass?")
  "List of functions from the Scheme CLOS-like libraries.")

(defconst chezscheme-custom-functions-list
  (append chezscheme-chezscheme-functions-list
	  chezscheme-clos-functions-list))

(defconst chezscheme-custom-syntaxes-list
  (append chezscheme-chezscheme-syntaxes-list
	  chezscheme-chezscheme-aux-syntaxes-list
	  chezscheme-clos-syntaxes-list))

(provide 'chezscheme-lists-of-symbols.el)
;;; chezscheme-lists-of-symbols.el ends here
